/*
 * This file is generated by jOOQ.
 */
package me.ryang.jooq.jooq_example.tables;


import java.util.Arrays;
import java.util.List;

import me.ryang.jooq.jooq_example.JooqExample;
import me.ryang.jooq.jooq_example.Keys;
import me.ryang.jooq.jooq_example.tables.records.PeopleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class People extends TableImpl<PeopleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_example.people</code>
     */
    public static final People PEOPLE = new People();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeopleRecord> getRecordType() {
        return PeopleRecord.class;
    }

    /**
     * The column <code>jooq_example.people.id</code>.
     */
    public final TableField<PeopleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq_example.people.first_name</code>.
     */
    public final TableField<PeopleRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>jooq_example.people.last_name</code>.
     */
    public final TableField<PeopleRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>jooq_example.people.email</code>.
     */
    public final TableField<PeopleRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private People(Name alias, Table<PeopleRecord> aliased) {
        this(alias, aliased, null);
    }

    private People(Name alias, Table<PeopleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_example.people</code> table reference
     */
    public People(String alias) {
        this(DSL.name(alias), PEOPLE);
    }

    /**
     * Create an aliased <code>jooq_example.people</code> table reference
     */
    public People(Name alias) {
        this(alias, PEOPLE);
    }

    /**
     * Create a <code>jooq_example.people</code> table reference
     */
    public People() {
        this(DSL.name("people"), null);
    }

    public <O extends Record> People(Table<O> child, ForeignKey<O, PeopleRecord> key) {
        super(child, key, PEOPLE);
    }

    @Override
    public Schema getSchema() {
        return JooqExample.JOOQ_EXAMPLE;
    }

    @Override
    public UniqueKey<PeopleRecord> getPrimaryKey() {
        return Keys.KEY_PEOPLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PeopleRecord>> getKeys() {
        return Arrays.<UniqueKey<PeopleRecord>>asList(Keys.KEY_PEOPLE_PRIMARY);
    }

    @Override
    public People as(String alias) {
        return new People(DSL.name(alias), this);
    }

    @Override
    public People as(Name alias) {
        return new People(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(String name) {
        return new People(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(Name name) {
        return new People(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
