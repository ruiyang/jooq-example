/*
 * This file is generated by jOOQ.
 */
package me.ryang.jooq.jooq_example.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import me.ryang.jooq.jooq_example.Indexes;
import me.ryang.jooq.jooq_example.JooqExample;
import me.ryang.jooq.jooq_example.Keys;
import me.ryang.jooq.jooq_example.tables.records.JobsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jobs extends TableImpl<JobsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_example.jobs</code>
     */
    public static final Jobs JOBS = new Jobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobsRecord> getRecordType() {
        return JobsRecord.class;
    }

    /**
     * The column <code>jooq_example.jobs.id</code>.
     */
    public final TableField<JobsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq_example.jobs.people_id</code>.
     */
    public final TableField<JobsRecord, Integer> PEOPLE_ID = createField(DSL.name("people_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq_example.jobs.employer_name</code>.
     */
    public final TableField<JobsRecord, String> EMPLOYER_NAME = createField(DSL.name("employer_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>jooq_example.jobs.start_date</code>.
     */
    public final TableField<JobsRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>jooq_example.jobs.end_date</code>.
     */
    public final TableField<JobsRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>jooq_example.jobs.role</code>.
     */
    public final TableField<JobsRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Jobs(Name alias, Table<JobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jobs(Name alias, Table<JobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_example.jobs</code> table reference
     */
    public Jobs(String alias) {
        this(DSL.name(alias), JOBS);
    }

    /**
     * Create an aliased <code>jooq_example.jobs</code> table reference
     */
    public Jobs(Name alias) {
        this(alias, JOBS);
    }

    /**
     * Create a <code>jooq_example.jobs</code> table reference
     */
    public Jobs() {
        this(DSL.name("jobs"), null);
    }

    public <O extends Record> Jobs(Table<O> child, ForeignKey<O, JobsRecord> key) {
        super(child, key, JOBS);
    }

    @Override
    public Schema getSchema() {
        return JooqExample.JOOQ_EXAMPLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOBS_PEOPLE_ID);
    }

    @Override
    public UniqueKey<JobsRecord> getPrimaryKey() {
        return Keys.KEY_JOBS_PRIMARY;
    }

    @Override
    public List<UniqueKey<JobsRecord>> getKeys() {
        return Arrays.<UniqueKey<JobsRecord>>asList(Keys.KEY_JOBS_PRIMARY);
    }

    @Override
    public Jobs as(String alias) {
        return new Jobs(DSL.name(alias), this);
    }

    @Override
    public Jobs as(Name alias) {
        return new Jobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(String name) {
        return new Jobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(Name name) {
        return new Jobs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, LocalDate, LocalDate, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
